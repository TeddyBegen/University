#include <stdio.h>
#include <driver/i2c.h>
#include "mpu.h"

#define SDAPin 33
#define SCLPin 32
#define MPU6050_ADDR 0x68
#define MPU6050_TEMP_OUT_L 0x42
#define MPU6050_TEMP_OUT_H 0x41

void app_main() {
    // create a little buffer where to store the answer
 uint8_t buffer;

 // initialise the I2C bus and the MPU6050
initI2C(SDAPin, SCLPin);

 while(1){

    // read the latest sampled temperature
    // we need to combine TEMP_OUT_L and TEMP_OUT_H into one 16-bit signed integer
    // and then coonvert that into C using the formula: t = temp_out /340 + 36.53
    // create a little buffer where to store the answer
    uint8_t buffer;
    // holder of the temperature
    int16_t tempRaw = 0;
    // read low register
    // send just the register number with no other data
    i2c_cmd_handle_t cmd = i2c_cmd_link_create();
    esp_err_t res = i2c_master_start(cmd);
    ESP_ERROR_CHECK(res);

    res = i2c_master_write_byte(cmd, MPU6050_ADDR << 1 | I2C_MASTER_WRITE, 1); // WRITE bit set!
    ESP_ERROR_CHECK(res);
    res = i2c_master_write_byte(cmd, MPU6050_TEMP_OUT_L, 1); // read low first
    ESP_ERROR_CHECK(res);
    res = i2c_master_stop(cmd);
    ESP_ERROR_CHECK(res);
    res = i2c_master_cmd_begin(I2C_NUM_0, cmd, 1000 / portTICK_RATE_MS);
    ESP_ERROR_CHECK(res);
    i2c_cmd_link_delete(cmd);

    // wait a little
    vTaskDelay(10 / portTICK_RATE_MS);

    // now read the answer
    cmd = i2c_cmd_link_create();
    res = i2c_master_start(cmd);
    ESP_ERROR_CHECK(res);
    res = i2c_master_write_byte(cmd, MPU6050_ADDR << 1 | I2C_MASTER_READ, 1); // READ bit set!
    ESP_ERROR_CHECK(res);
    res = i2c_master_read(cmd, &buffer, 1, I2C_MASTER_NACK);
    ESP_ERROR_CHECK(res);
    res = i2c_master_stop(cmd);
    ESP_ERROR_CHECK(res);
    res = i2c_master_cmd_begin(I2C_NUM_0, cmd, 1000 / portTICK_RATE_MS);
    ESP_ERROR_CHECK(res);
    i2c_cmd_link_delete(cmd);

    tempRaw = buffer;

    // read high register
    cmd = i2c_cmd_link_create();
    res = i2c_master_start(cmd);
    ESP_ERROR_CHECK(res);
    res = i2c_master_write_byte(cmd, MPU6050_ADDR << 1 | I2C_MASTER_WRITE, 1); // WRITE bit set!
    ESP_ERROR_CHECK(res);
    res = i2c_master_write_byte(cmd, MPU6050_TEMP_OUT_H, 1); // read high
    ESP_ERROR_CHECK(res);
    res = i2c_master_stop(cmd);
    ESP_ERROR_CHECK(res);
    res = i2c_master_cmd_begin(I2C_NUM_0, cmd, 1000 / portTICK_RATE_MS);

    ESP_ERROR_CHECK(res);
    i2c_cmd_link_delete(cmd);
    vTaskDelay(10 / portTICK_RATE_MS);
    cmd = i2c_cmd_link_create();
    res = i2c_master_start(cmd);
    ESP_ERROR_CHECK(res);
    res = i2c_master_write_byte(cmd, MPU6050_ADDR << 1 | I2C_MASTER_READ, 1); // READ bit set!
    ESP_ERROR_CHECK(res);
    res = i2c_master_read(cmd, &buffer, 1, I2C_MASTER_NACK);
    ESP_ERROR_CHECK(res);
    res = i2c_master_stop(cmd);
    ESP_ERROR_CHECK(res);
    res = i2c_master_cmd_begin(I2C_NUM_0, cmd, 1000 / portTICK_RATE_MS);
    ESP_ERROR_CHECK(res);
    i2c_cmd_link_delete(cmd);

    // combine high and low registers into a signed integer
    tempRaw |= ((int16_t)buffer) << 8;
    printf("temp raw is: %d\n", tempRaw);
    
    // convert raw value to temperature
    float temp = ((float)tempRaw) / 340 + 36.53;
    printf("temperature is: %.2f C\n", temp);

    vTaskDelay(500 / portTICK_RATE_MS);

 // get acceleration
 // print acceleration
 //vTaskDelay(pdMS_TO_TICKS(500));
 }
}